"""
Django settings for certtool project.

Generated by 'django-admin startproject' using Django 4.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import os
import sys
from json import loads
from pathlib import Path

from sentry_sdk.integrations.django import DjangoIntegration

from configurator.environment import ENVIRONMENTS, Environment, str_to_bool
from sentry_utils.sentry_init import sentry_init

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = os.path.abspath(Path(__file__).resolve().parent.parent.parent)
CONFIGURATOR_DIR = os.path.join(BASE_DIR, "certtool/conf/")
env = Environment(config_dir=CONFIGURATOR_DIR)
ENV = env
ENVIRONMENT = env.environment
SERVICE = env.get_env("SERVICE", "")

POD_LABEL = env.get_env("POD_LABEL", "")

# The version and build date of this Django project are set when the webapp
# image is built, see also 'docker/base/Dockerfile'
VERSION = env.get_env("VERSION", "")
BUILD_DATE = env.get_env("BUILD_DATE", "")

TESTING = sys.argv[1:2] == ["test"]
# TEST_RUNNER = (
#    "cedar_django_test_runner.cedar_test_discover_runner.CedarTestDiscoverRunner"
# )

LOCAL_SERVICES = []

LOCAL_SERVICES.append("db")


TESTING_DEFAULT_PROCESSES = 5  # The default number of processes to use in testing


# using Django default cache
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}


# Used for Django signing
SECRET_KEY = env.get_env("SECRET_KEY", None)
# Used for encrypted fields
ENCRYPTION_KEYS = loads(env.get_env("ENCRYPTION_KEYS", "{}"))
HMAC_KEYS = loads(env.get_env("HMAC_KEYS", "{}"))
# SECURITY WARNING: don't run with debug turned on in production or staging!
DEBUG = str_to_bool(env.get_env("DEBUG", "false"))

ALLOWED_HOSTS = ["*"]

### SENTRY
SENTRY_PROJECT_ID = env.get_env("SENTRY_PROJECT_ID", "0000")
SENTRY_PUBLIC_KEY = env.get_env("SENTRY_PUBLIC_KEY", "NONE")
SENTRY_HOSTNAME = env.get_env("SENTRY_HOSTNAME", "sentry.cedarinternal.com")

if ENVIRONMENT in ENVIRONMENTS.all_non_dev_environments():
    sentry_integrations = [DjangoIntegration()]

    sentry_init(
        sentry_public_key=SENTRY_PUBLIC_KEY,
        sentry_hostname=SENTRY_HOSTNAME,
        sentry_project_id=SENTRY_PROJECT_ID,
        version=VERSION,
        environment=ENVIRONMENT,
        pod_label=POD_LABEL,
        extra_tags={"service_name": "certtool", "code_owner": "platform"},
        integrations=sentry_integrations,
    )

# Logging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "root": {
        "handlers": ["console"],
        "level": "DEBUG" if bool(ENVIRONMENT == ENVIRONMENTS.DEV) else "INFO",
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "stream": sys.stdout,
            "formatter": "structured",
        },
        "null": {"class": "logging.NullHandler"},
    },
    "formatters": {
        "verbose": {
            "()": "json_extra_formatter.JsonExtraFormatter",
            "format": "%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s %(data)s",
        },
        "original": {
            "()": "json_extra_formatter.JsonExtraFormatter",
            "format": "%(message)s %(data)s",
        },
        "structured": {
            "()": "json_extra_formatter.StructuredLogFormatter",
        },
    },
}

structured_dev_logging = str_to_bool(env.get_env("ENABLE_STRUCTURED_DEV_LOG", "false"))
if ENVIRONMENT == ENVIRONMENTS.DEV and not structured_dev_logging:
    LOGGING["handlers"]["console"]["formatter"] = "original"  # type: ignore

if (
    not str_to_bool(env.get_env("ENABLE_LOGGING", "false"))
    and ENVIRONMENT == ENVIRONMENTS.DEV
    and TESTING
):
    # Disable logging to the console in tests
    LOGGING["root"]["handlers"] = ["null"]  # type: ignore

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "configurator",
    "metrics",
    "certtool",
    "certtool_api",
    "lint_django_migrations",
]

# if TESTING:
#    INSTALLED_APPS += ["cedar_django_test_runner", "django_db_test_utils"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "certtool.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "certtool.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Database

DEFAULT_DB = "default"
db_ssl_mode = env.get_env("DB_SSL_MODE", "prefer")
user = env.get_env("DB_USER", "postgres")

"""Default DB connection timeout (passed to psycopg2) for Postgres connections"""
_DB_CONNECT_TIMEOUT_SECONDS = "60"

pg_options = {
    "sslmode": db_ssl_mode,
    "application_name": user,
    "connect_timeout": int(
        env.get_env("DB_CONNECT_TIMEOUT_SECONDS", _DB_CONNECT_TIMEOUT_SECONDS)
    ),
}

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env.get_env("DB_NAME", "certtool"),
        "USER": user,
        "HOST": env.get_env("DB_HOST", "db"),
        "PASSWORD": env.get_env("DB_PASS", None),
        "PORT": env.get_env("DB_PORT", 5432),
        "OPTIONS": pg_options,
        "TEST": {
            "DEPENDENCIES": [],
        },
        # This must be set to a value lower than the idle connection timeout
        # set on the database connection pooler. Recommended to set it to a little
        # less than the pooler's setting so the connections are closed by Django first.
        # Default to 120 if not provided.
        "CONN_MAX_AGE": int(env.get_env("DB_CONN_MAX_AGE", "120")),
    }
}

# django-pg-zero-downtime-migrations app
ZERO_DOWNTIME_MIGRATIONS_LOCK_TIMEOUT = "2s"
ZERO_DOWNTIME_MIGRATIONS_STATEMENT_TIMEOUT = "2s"
ZERO_DOWNTIME_MIGRATIONS_FLEXIBLE_STATEMENT_TIMEOUT = True
ZERO_DOWNTIME_MIGRATIONS_RAISE_FOR_UNSAFE = str_to_bool(
    env.get_env(
        "ZERO_DOWNTIME_MIGRATIONS_RAISE_FOR_UNSAFE",
        "true",
    )
)
ZERO_DOWNTIME_MIGRATIONS_USE_NOT_NULL = False

# This was added to prevent a 'django-pg-zero-downtime-migrations' warning getting
# elevated to an exception and preventing SQL getting added to migrations on linting.
DONT_RAISE_WARNINGS_IN_DEV = str_to_bool(
    env.get_env(
        "DONT_RAISE_WARNINGS_IN_DEV",
        "false",
    )
)
